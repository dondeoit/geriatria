import streamlit as st
import plotly.graph_objects as go

# Configura√ß√£o de p√°gina
st.set_page_config(
    page_title="Calculadora de Risco Human Care Brasil",
    page_icon="üë¥",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# Ocultar menu e rodap√© do Streamlit e ajustar estilos
ocultar_estilo = """
    <style>
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    header {visibility: hidden;}

    /* Estilos para alinhar os itens */
    .nao-sim-container {
        display: flex;
        align-items: center;
        justify-content: center;
        flex-wrap: wrap;  /* Garante que n√£o quebre o layout */
        gap: 10px;
        width: 100%;
    }

    .nao-sim-container > div {
        text-align: center;
        flex: 1; /* Permite ajuste autom√°tico da largura */
    }

    /* Ajuste para o toggle */
    .stToggle {
        margin: 0;
        transform: scale(1.3);
    }

    /* Remover "False" da tela */
    .st-bo {
        display: none !important;
    }

    /* Responsividade */
    @media (max-width: 768px) {
        .nao-sim-container {
            flex-direction: row;
            gap: 5px;
        }

        .nao-sim-container > div {
            flex: 1;
        }
    }
    </style>
"""
st.markdown(ocultar_estilo, unsafe_allow_html=True)

# Lista de perguntas e seus pesos
perguntas_pesos = [
	("1.1 Precisa de aux√≠lio para se levantar cama da cama?", 1),
	("1.2 Tem dificuldades para se vestir sozinho?", 1),
	("1.3 Preciso de apoio ao tomar banho?", 1),
	("1.4 Suas refei√ß√µes e lanches precisam ser preparadas por outra pessoa?", 1),
	("1.5 Possui alguma dificuldade em realzi0ar compras de casa (supermercado) sozinho?", 1),
	("2.1 Gostaria de morar sozinho, mas n√£o pode?", 1),
	("2.2 Necessita ou tem algum tipo de acompanhamento durante o dia e/ou √† noite?", 1),
	("2.3 Faz uso de medica√ß√µes todos os dias? Qual o n√∫mero de medicamentos?", 1),
	("2.4 J√° sofreu alguma queda nos √∫ltimos 5 anos?", 1),
	("2.5 J√° esteve hospitalizado nos ultimos 12 meses?", 1),
	("3.1 Tem alguma defici√™ncia auditiva?", 1),
	("3.2 Tem alguma defici√™ncia visual?", 1),
	("3.3 Apresenta falta de equil√≠brio ou tem mobilidade reduzida?", 1),
	("3.4 Usa bengala ou andador?", 2),
	("3.5 Usa cadeira de rodas?", 3),
	("3.6 Est√° acamado?", 4),
	("3.7 Tem algum sinal de des√¢nimo, tristeza ou depress√£o?", 1),
	("3.8 Tem algum sinal de perda de mem√≥ria?", 1),
	("3.9 Acorda √† noite para ida(s) ao banheiro?", 1),
	("3.10 Tem algum sinal de incontin√™ncia urin√°ria?", 1),
	("3.11 Tem algum sinal de incontin√™ncia fecal?", 1),
	("3.12 Faz tempo que n√£o recebe visitas (ou sai de casa) regulares de amigos ou familiares?", 1),
	("3.13 Voc√™ acha que n√£o precisa adaptar sua casa (banheiro, corrim√£o, luz de emerg√™ncia)?", 1),
	("3.14 Se sente ocioso, ou seja, evita a pr√°tica regular de exerc√≠cios f√≠sicos?", 1),
]

# T√≠tulo e subt√≠tulo
st.title("üëµüë¥ CALCULADORA DE DECL√çNIO E RISCO CL√çNICO/FUNCIONAL")
st.write("**Responda 'Sim' ou 'N√£o' para cada pergunta abaixo.**")

score = 0
for i, (pergunta, peso) in enumerate(perguntas_pesos):
    col1, col2 = st.columns([3, 1])

    with col1:
        st.write(f"**{pergunta}**")

    with col2:
        # Criando a estrutura correta para alinhar "N√ÉO", Toggle e "SIM"
        col_nao, col_toggle, col_sim = st.columns([1, 1, 1])

        with col_nao:
            st.write("N√ÉO")

        with col_toggle:
            resposta = st.toggle("", key=f"toggle_{i}")

        with col_sim:
            st.write("SIM")

    # Soma a pontua√ß√£o se a resposta for SIM
    if resposta:
        score += peso

# Define o risco com base no score
if score <= 10:
    cor = "green"
    risco = "Baixo"
elif score <= 15:
    cor = "orange"
    risco = "Moderado"
else:
    cor = "darkred"
    risco = "Alto"

# Criar veloc√≠metro
fig = go.Figure(go.Indicator(
    mode="gauge+number",
    value=score,
    title={'text': "N√≠vel de Risco"},
    gauge={
        'axis': {'range': [0, 25]},
        'bar': {'color': cor},
        'steps': [
            {'range': [0, 10], 'color': "lightgreen"},
            {'range': [10, 15], 'color': "yellow"},
            {'range': [15, 25], 'color': "red"}
        ]
    }
))

# Exibe veloc√≠metro e classifica√ß√£o
st.plotly_chart(fig)
st.write(f"**Classifica√ß√£o do risco:** {risco}")
